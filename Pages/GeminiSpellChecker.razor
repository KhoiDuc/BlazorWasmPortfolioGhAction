@using System.Text.Json
@inject ApiKeyModel ApiKeyService
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<!-- Hero -->
<div class="hero-container">
    <div class="content-wrapper">
        <div class="text-center">
            @if (enumPage == EnumPage.FirstPage)
            {
                <h1>Enter API Key</h1>
                <p>Enter your API Key to use the Gemini API.</p>
                <div class="form-container">
                    <!-- Form -->
                    <div class="input-form">
                        <div class="input-full-width">
                            <label for="api-key-input" class="sr-only">Enter API Key</label>
                            <input type="text" @bind="ApiKey" id="api-key-input"
                                   class="input-field" placeholder="Enter API Key" />
                        </div>
                        <div>
                            <button @onclick="SaveApiKey" class="button button-primary button-icon">
                                <svg class="icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M5 12h14M12 5l7 7-7 7" />
                                </svg>
                            </button>
                        </div>
                    </div>
                    <!-- End Form -->
                </div>
            }
            else if (enumPage == EnumPage.SecondPage)
            {
                <h1>Vietnamese Spell Checker</h1>
                <p>Check your Vietnamese text and view corrections.</p>
                <div class="form-container">
                    <!-- Form -->
                    <div class="input-form" style="flex-direction: column; gap: 0.75rem;">
                        <div class="input-full-width">
                            <label for="spell-check-input" class="sr-only">Enter Text</label>
                            <textarea @bind="InputText" id="spell-check-input" rows="5"
                                      class="textarea-field" placeholder="Enter Vietnamese text"></textarea>
                        </div>
                        <div style="display: flex; justify-content: flex-end; gap: 0.75rem;">
                            <button @onclick="GoBack" class="button button-secondary">
                                Go Back
                                <svg class="icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M19 12H5" />
                                    <path d="M12 19l-7-7 7-7" />
                                </svg>
                            </button>
                            <button @onclick="CheckSpelling" class="button button-primary">
                                Check Spelling
                                <svg class="icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="11" cy="11" r="8" />
                                    <path d="m21 21-4.3-4.3" />
                                </svg>
                            </button>
                        </div>
                    </div>
                    <!-- End Form -->
                    <div class="results">
                        <p>Corrected Text:</p>
                        <code>@CorrectedText</code>
                        @if (!string.IsNullOrEmpty(Corrections))
                        {
                            <ul>
                                Corrections Made:
                                @{
                                    string[] strArr = Corrections.Split(',');
                                    foreach (var str in strArr)
                                    {
                                        <li>@str</li>
                                    }
                                }
                            </ul>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<!-- End Hero -->
@code {
    private string InputText { get; set; } = string.Empty;
    private string CorrectedText { get; set; } = string.Empty;
    private string Corrections { get; set; } = string.Empty;
    private string ApiKey { get; set; } = string.Empty;

    private EnumPage enumPage = EnumPage.FirstPage;

    public enum EnumPage
    {
        FirstPage,
        SecondPage
    }

    private void SaveApiKey()
    {
        if (!string.IsNullOrEmpty(ApiKey))
        {
            ApiKeyService.ApiKey = ApiKey;
            enumPage = EnumPage.SecondPage;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        enumPage = EnumPage.FirstPage;
        StateHasChanged();
    }

    private async Task CheckSpelling()
    {
        if (string.IsNullOrEmpty(InputText))
        {
            CorrectedText = "Please enter text.";
            Corrections = string.Empty;
            StateHasChanged();
            return;
        }

        try
        {
            var apiKey = ApiKeyService.ApiKey;
            if (string.IsNullOrEmpty(apiKey))
            {
                CorrectedText = "API Key not provided.";
                Corrections = string.Empty;
                StateHasChanged();
                return;
            }

            var requestUri = $"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={apiKey}";
            var prompt = $"Correct the spelling of the following Vietnamese text. Return the result in this format:\n" +
                         $"Corrected: [corrected text here]\n" +
                         $"Fixes: [list each correction as 'original -> corrected', separated by commas, or 'None' if no changes]\n\n" +
                         $"Text: {InputText}";

            var requestBody = new
            {
                contents = new[] { new { parts = new[] { new { text = prompt } } } },
                generationConfig = new { temperature = 0.1, maxOutputTokens = 500 }
            };

            var response = await Http.PostAsJsonAsync(requestUri, requestBody);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<GeminiResponse>(jsonResponse,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                var rawResponse = result?.Candidates?.FirstOrDefault()?.Content?.Parts?.FirstOrDefault()?.Text?.Trim() ?? InputText;
                CorrectedText = ExtractCorrectedText(rawResponse) ?? InputText;
                Corrections = ExtractCorrections(rawResponse) ?? "No changes needed.";
            }
            else
            {
                CorrectedText = $"An error occurred while checking. (Error: {response.StatusCode})";
                Corrections = string.Empty;
            }
        }
        catch (Exception ex)
        {
            CorrectedText = $"Error: {ex.Message}";
            Corrections = string.Empty;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private string ExtractCorrectedText(string response)
    {
        var correctedPrefix = "Corrected: ";
        var startIndex = response.IndexOf(correctedPrefix);
        if (startIndex == -1) return null;

        startIndex += correctedPrefix.Length;
        var endIndex = response.IndexOf("\n", startIndex);
        if (endIndex == -1) endIndex = response.Length;

        return response.Substring(startIndex, endIndex - startIndex).Trim();
    }

    private string ExtractCorrections(string response)
    {
        var fixesPrefix = "Fixes: ";
        var startIndex = response.IndexOf(fixesPrefix);
        if (startIndex == -1) return null;

        startIndex += fixesPrefix.Length;
        var corrections = response.Substring(startIndex).Trim();
        return corrections == "None" ? "No corrections required." : corrections;
    }

    private class GeminiResponse
    {
        public Candidate[] Candidates { get; set; }
    }

    private class Candidate
    {
        public Content Content { get; set; }
    }

    private class Content
    {
        public Part[] Parts { get; set; }
    }

    private class Part
    {
        public string Text { get; set; }
    }
}