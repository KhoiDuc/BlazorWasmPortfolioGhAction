@page "/{type?}/{sections?}/{subSections?}"
@using System.Net;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json;
@using System.Timers;
@using System.Text.RegularExpressions;
@using BlazorWasmPortfolioGhAction.Shared.Model;
@using BlazorWasmPortfolioGhAction.Store.Actions;
@using BlazorWasmPortfolioGhAction.Store.State;
@using Fluxor;
@inject IState<ContentState> contentState
@inject IDispatcher Dispatcher
@inject HttpClient Http;
@inject NavigationManager Navigation;
@inject IJSRuntime JSRuntime;

<div class="container-fluid mx-0 ps-0 mainContentContainer">
    <div class="row mx-0 ps-0 gx-3">
        <div class="col">
            <div class="introductionBody">
                <div class="start_light"></div>
                <div id="header">
                    <div class="container">
                        <nav class="nav">
                            <h2 class="title-content">PORTFOLIO</h2>
                        </nav>
                        <div class="header-content">
                            <div class="header-text">
                                <h1>Khoi Nguyen Minh Duc</h1>
                                <p>.NET Developer</p>
                                <div class="grid-container justify-content-center">
                                    <div class="email-button contact-container">
                                        <button id="contactButton" class="contact-button email-link">
                                            <h5>Contact Me</h5>
                                            <img src="envelope-blue.svg" alt="email" class="email-icon">
                                        </button>
                                        <div id="contactOptions" class="contact-options">
                                            <a href="mailto:khoi.duc.dev@gmail.com" class="email-link">
                                                <h6>Default Email</h6>
                                                <i class="fas fa-envelope email-icon"></i>
                                            </a>
                                            <a href="https://mail.google.com/mail/?view=cm&fs=1&to=khoi.duc.dev@gmail.com" class="email-link">
                                                <h6>Gmail</h6>
                                                <i class="fab fa-google email-icon"></i>
                                            </a>
                                            <a href="https://outlook.live.com/mail/0/deeplink/compose?to=khoi.duc.dev@gmail.com" class="email-link">
                                                <h6>Outlook</h6>
                                                <i class="fab fa-microsoft email-icon"></i>
                                            </a>
                                            <a href="javascript:void(0)" class="email-link" onclick="copyEmail()">
                                                <h6>Copy Email</h6>
                                                <i class="fas fa-copy email-icon"></i>
                                            </a>
                                        </div>
                                    </div>
                                    <div class="google-drive-button">
                                        <a href="MyResume" class="google-drive-link">
                                            <h5>My Resume</h5>
                                            <img src="googledrive-blue.svg" alt="Resume site" class="google-drive-icon">
                                        </a>
                                    </div>
                                    <div class="download-file-button">
                                        <a href="Dissertation/CV" class="download-file-button-link">
                                            <h5>My CV</h5>
                                            <img src="downloadfile-blue.svg" alt="Download file" class="download-file-icon">
                                        </a>
                                    </div>
                                </div>
                            </div>
                            <div class="header-image">
                                <img src="avt-men.png" alt="Profile Image">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    const contactButton = document.getElementById('contactButton');
    const contactOptions = document.getElementById('contactOptions');

    contactButton.addEventListener('click', () => {
        contactOptions.classList.toggle('show');
    });

    document.addEventListener('click', (event) => {
        if (!contactButton.contains(event.target) && !contactOptions.contains(event.target)) {
            contactOptions.classList.remove('show');
        }
    });
    function copyEmail() {
        const email = "khoi.duc.dev@gmail.com";
        navigator.clipboard.writeText(email).then(() => {
            alert("Copy email to clipboard: " + email);
        });
    }
</script>

@code {
    public List<SearchResult> searchResults = new List<SearchResult>();
    public string? searchTerm { get; set; }
    private string Logo = "Logo.png";
    public string loadingMSG = "Loading...";
    @* Declare var for current user selection *@
    [Parameter]
    public string? type { get; set; }
    [Parameter]
    public string? sections { get; set; }
    [Parameter]
    public string? subSections { get; set; }
    private bool? inline { get; set; } = true;
    private string? typeDropdown;
    private string? newTypeDropdown;
    private string? sectionName;
    private string? subSectionName;
    private string? newSectionName;
    private int sectionBeingEdited;
    private string TinyAPIKey = "";
    private ElementReference cardsWrapper; // This holds reference to our cards container
    private int currentIndex = 0; // Keeps track of current slide
    private string myStyle = ""; // Style string that we'll bind to
    private double cardWidth = 0;
    private int visibleCards = 0;
    private string transitionStyle = "transition: transform 0.3s ease;";
    private CancellationTokenSource cts = new CancellationTokenSource();

    [Inject] public AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("MainContent.razor initialized");
        try
        {
            contentState.StateChanged += ContentStateChanged;
            Navigation.LocationChanged += LocationChanged!;
            base.OnInitialized();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            loadingMSG += "Error Loading Content: " + ex.Message;
            StateHasChanged();
        }

        while (true)
        {
            try
            {
                await Task.Delay(5000, cts.Token);
            }
            catch (TaskCanceledException)
            {
                await Task.Delay(150);
                cts = new CancellationTokenSource();
            }

            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeStarfield");
            await JSRuntime.InvokeVoidAsync("initializeScrollProgress");
        }
    }

    private async void ContentStateChanged(object? sender, EventArgs e)
    {
        if (contentState.Value.FileCount == contentState.Value.LoadedFilesCount)
        {
            await InvokeAsync(StateHasChanged); // Update the UI
            await Task.Delay(500);
            cardWidth = await JSRuntime.InvokeAsync<double>("carouselHelper.getCardWidth");
            visibleCards = await JSRuntime.InvokeAsync<int>("carouselHelper.getVisibleCards");
            await JSRuntime.InvokeVoidAsync("carouselHelper.addResizeListener", DotNetObjectReference.Create(this));
            await JSRuntime.InvokeVoidAsync("registerComponentInstance", DotNetObjectReference.Create(this));

        }
    }

    [JSInvokable("RecalculateSizes")]
    public async Task RecalculateSizes()
    {
        currentIndex = 0;
        myStyle = $"transform: translateX(0px);";
        StateHasChanged();
        await Task.Delay(500);
        cardWidth = await JSRuntime.InvokeAsync<double>("carouselHelper.getCardWidth");
        visibleCards = await JSRuntime.InvokeAsync<int>("carouselHelper.getVisibleCards");
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("carouselHelper.unregisterComponentInstance");
        contentState.StateChanged -= ContentStateChanged;
    }


    public class Card
    {
        public string? Title { get; set; }
        public string? Text { get; set; }
        public string? Link { get; set; }
        public string? ButtonText { get; set; }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //Code to execute once
            //await GetAuthenticationState();
        }
        base.OnAfterRender(firstRender);
    }

    @* Checks current authentication state *@

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        ClearIsEditingArray();
    }

    @* Method called in a few places, but should close all open editors, and save any content thats being edited currently *@
    private void ClearIsEditingArray()
    {
        Dispatcher.Dispatch(new ResetIsEditingAction());

    }

    private void RefreshMe()
    {
        StateHasChanged();
    }
}