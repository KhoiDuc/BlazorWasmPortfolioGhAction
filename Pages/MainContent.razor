@page "/{type?}/{sections?}/{subSections?}"
@using System.Net;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json;
@using System.Timers;
@using System.Text.RegularExpressions;
@using BlazorWasmPortfolioGhAction.Shared.Model;
@using BlazorWasmPortfolioGhAction.Store.Actions;
@using BlazorWasmPortfolioGhAction.Store.State;
@using Fluxor;
@inject IState<ContentState> contentState
@inject IDispatcher Dispatcher
@inject HttpClient Http;
@inject NavigationManager Navigation;
@inject IJSRuntime JSRuntime;

<div class="container-fluid mx-0 ps-0 mainContentContainer">
    <div class="row mx-0 ps-0 gx-3">
        <div class="col">
            <div class="introductionBody">
                <!-- Begin: Home -->
                <div class="start_light"></div>
                <div id="header">
                    <div class="container">
                        <nav class="nav">
                            <h2 class="title-content">PORTFOLIO</h2>
                        </nav>
                        <div class="header-content">
                            <div class="header-text">
                                <h1>Khoi Nguyen Minh Duc</h1>
                                <p>.NET Developer</p>
                                <div class="grid-container justify-content-center">
                                    <div class="email-button">
                                        <a href="mailto:khoi.duc.dev@gmail.com" class="email-link">
                                            <h5>Contact Me</h5>
                                            <img src="envelope-blue.svg" alt="email" class="email-icon">
                                        </a>
                                    </div>
                                    <div class="google-drive-button">
                                        <a href="MyResume" class="google-drive-link">
                                            <h5>My Resume</h5>
                                            <img src="googledrive-blue.svg" alt="Resume site" class="google-drive-icon">
                                        </a>
                                    </div>
                                    <div class="download-file-button">
                                        <a href="Dissertation/CV" class="download-file-button-link">
                                            <h5>My CV</h5>
                                            <img src="downloadfile-blue.svg" alt="Download file" class="download-file-icon">
                                        </a>
                                    </div>
                                </div>
                            </div>
                            <div class="header-image">
                                <img src="avt-men.png" alt="Profile Image">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    @* Declare custom object array will change this for a dictionary *@
    public List<SearchResult> searchResults = new List<SearchResult>();
    public string? searchTerm { get; set; }
    private string Logo = "Logo.png";
    public string loadingMSG = "Loading...";
    @* Declare var for current user selection *@
    [Parameter]
    public string? type { get; set; }
    [Parameter]
    public string? sections { get; set; }
    [Parameter]
    public string? subSections { get; set; }
    @* Declare Global Vars *@
    private bool? inline { get; set; } = true;
    //private List<ContentHolder> initialContent;
    //private bool[]? IsEditing;
    private string? typeDropdown;
    private string? newTypeDropdown;
    private string? sectionName;
    private string? subSectionName;
    private string? newSectionName;
    private int sectionBeingEdited;
    private string TinyAPIKey = "";
    @* Declare/Initialize variables for API communication *@
    private string? commitText = "Test From Wiki";

    private ElementReference cardsWrapper; // This holds reference to our cards container
    private int currentIndex = 0; // Keeps track of current slide
    private string myStyle = ""; // Style string that we'll bind to
    private double cardWidth = 0;
    private int visibleCards = 0;
    private string transitionStyle = "transition: transform 0.3s ease;";
    private CancellationTokenSource cts = new CancellationTokenSource();

    [Inject] public AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    @* Initialize page.  Using Async initialization as I want to load content from API before rendering *@
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("MainContent.razor initialized");
        try
        {
            @* Call method to make GET request *@
            //await Task.WhenAll(GetAllContentFromGitHubRepo<ContentHolder>(false));
            contentState.StateChanged += ContentStateChanged;
            @* Initialize control variables after populating contentState.Value.Contents *@

            @* Add event handler to navigation change event to reset IsEditing array *@
            Navigation.LocationChanged += LocationChanged!;
            base.OnInitialized();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            loadingMSG += "Error Loading Content: " + ex.Message;
            StateHasChanged();
        }

        while (true)
        {
            try
            {
                await Task.Delay(5000, cts.Token);  // Use the token here
            }
            catch (TaskCanceledException)
            {
                // Reset the CancellationTokenSource for future delays
                await Task.Delay(150);
                cts = new CancellationTokenSource();
            }

            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeStarfield");
            await JSRuntime.InvokeVoidAsync("initializeScrollProgress");
        }
    }

    private async void ContentStateChanged(object? sender, EventArgs e)
    {
        if (contentState.Value.FileCount == contentState.Value.LoadedFilesCount)
        {
            await InvokeAsync(StateHasChanged); // Update the UI
            await Task.Delay(500);
            cardWidth = await JSRuntime.InvokeAsync<double>("carouselHelper.getCardWidth");
            visibleCards = await JSRuntime.InvokeAsync<int>("carouselHelper.getVisibleCards");
            await JSRuntime.InvokeVoidAsync("carouselHelper.addResizeListener", DotNetObjectReference.Create(this));
            await JSRuntime.InvokeVoidAsync("registerComponentInstance", DotNetObjectReference.Create(this));

        }
    }

    [JSInvokable("RecalculateSizes")]
    public async Task RecalculateSizes()
    {
        currentIndex = 0;
        myStyle = $"transform: translateX(0px);";
        StateHasChanged();
        await Task.Delay(500);
        cardWidth = await JSRuntime.InvokeAsync<double>("carouselHelper.getCardWidth");
        visibleCards = await JSRuntime.InvokeAsync<int>("carouselHelper.getVisibleCards");
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("carouselHelper.unregisterComponentInstance");
        contentState.StateChanged -= ContentStateChanged;
    }


    public class Card
    {
        public string? Title { get; set; }
        public string? Text { get; set; }
        public string? Link { get; set; }
        public string? ButtonText { get; set; }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //Code to execute once
            //await GetAuthenticationState();
        }
        base.OnAfterRender(firstRender);
    }

    @* Checks current authentication state *@

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        ClearIsEditingArray();
    }

    @* Method called in a few places, but should close all open editors, and save any content thats being edited currently *@
    private void ClearIsEditingArray()
    {
        Dispatcher.Dispatch(new ResetIsEditingAction());

    }
    @* Detects when text changes in the search component, and triggers search methods *@
    private void SearchTermChanged(string searchPhrase)
    {
        Console.WriteLine("Search Term Changed In Component!");
        searchTerm = searchPhrase;
        if (searchTerm!.Length > 1)
        {
            @* Not a good solution, I need to add entries to contentState.Value.Contents that can be searched through, but don't get rendered. *@
            if (string.Equals(searchTerm, "CV", StringComparison.OrdinalIgnoreCase))
            {
                Navigation.NavigateTo($"/Dissertation/CV");
            }
            else if (string.Equals(searchTerm, "Transcript", StringComparison.OrdinalIgnoreCase))
            {
                Navigation.NavigateTo($"/Dissertation/Transcript");
            }
            else if (string.Equals(searchTerm, "Degree", StringComparison.OrdinalIgnoreCase))
            {
                Navigation.NavigateTo($"/Dissertation/Degree");
            }
            else
            {
                searchResults = PerformSearch(searchTerm, contentState.Value.Contents);
            }
        }
        if (type != "Search")
        {
            if (searchTerm!.Length > 1)
            {
                Navigation.NavigateTo($"/Search");
            }
        }
        else
        {
            if (String.IsNullOrWhiteSpace(searchTerm))
            {
                Navigation.NavigateTo($"/all");
            }
        }

    }
    @* Build a list of search results including scores *@
    private List<SearchResult> PerformSearch(string searchTerm, List<ContentHolder> contentList)
    {
        var results = new List<SearchResult>();

        for (int i = 0; i < contentList.Count; i++)
        {
            var content = contentList[i];
            int score = CalculateMatchScore(searchTerm, content);
            if (score > 0)
            {
                results.Add(new SearchResult { Score = score, Content = content });
            }
        }
        return results.OrderByDescending(r => r.Score).ToList();
    }

    @* Calculate score for each item in contentState.Value.Contents.  Might need to play with the given scores for each match type *@
    public int CalculateMatchScore(string searchTerm, ContentHolder content)
    {
        int score = 0;
        // Normalize search term
        searchTerm = Regex.Replace(searchTerm.Trim(), @"\p{P}", "").ToLower();

        // Split the search term into words
        var searchWords = searchTerm.Split(' ').Where(word => !string.IsNullOrEmpty(word));

        // Strip HTML tags from content and normalize
        var strippedContent = Regex.Replace(content.content, "<.*?>", String.Empty);
        strippedContent = Regex.Replace(strippedContent, @"\p{P}", "").ToLower();

        // Split the content into words
        var contentWords = strippedContent.Split(' ').Where(word => !string.IsNullOrEmpty(word));

        // Normalize title words
        var title = $"{content.page} {content.section} {content.subSection}";
        title = Regex.Replace(title, "<.*?>", String.Empty);
        title = Regex.Replace(title, @"\p{P}", "").ToLower();

        var titleWords = title.Split(' ').Where(word => !string.IsNullOrEmpty(word));

        // Check if the entire search term appears in the content or title
        if (strippedContent.Contains(searchTerm) || title.Contains(searchTerm))
        {
            score += 4;
        }

        // Check each word in the content
        foreach (var word in contentWords)
        {
            if (searchWords.Any(searchWord => string.Equals(word, searchWord, StringComparison.OrdinalIgnoreCase)))
            {
                score += 2;
            }
            else if (searchWords.Any(searchWord => word.Contains(searchWord, StringComparison.OrdinalIgnoreCase)))
            {
                score += 1;
            }
        }

        // Check each word in the title
        foreach (var word in titleWords)
        {
            if (searchWords.Any(searchWord => string.Equals(word, searchWord, StringComparison.OrdinalIgnoreCase)))
            {
                score += 3;
            }
            else if (searchWords.Any(searchWord => word.Contains(searchWord, StringComparison.OrdinalIgnoreCase)))
            {
                score += 2;
            }
        }

        return score;
    }

    private void RefreshMe()
    {
        StateHasChanged();
    }

    @* Add a new object to my array from user input *@
    private async Task AddNewSection(string username)
    {
        @* Using data binding to tie user selection to these vars *@
        string? subName = subSectionName;
        string? newType = newTypeDropdown;
        string? newName = newSectionName;
        string finalType;
        string finalName;
        if (typeDropdown == "Add")
        {
            finalType = newTypeDropdown!;
        }
        else
        {
            finalType = typeDropdown!;
        }
        if (sectionName == "Add")
        {
            finalName = newSectionName!;
        }
        else
        {
            finalName = sectionName!;
        }
    }
}